type: edu
files:
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram("jsondatabase.client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("jsondatabase.server");
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/jsondatabase/Server.kt
  visible: true
  text: |
    package jsondatabase.server

    import java.io.DataInputStream
    import java.io.DataOutputStream
    import java.net.InetAddress
    import java.net.ServerSocket
    import java.net.Socket

    class Db(size: Int, private val socket: Socket) : Thread() {
        private var dbJSON = Array(size + 1) { "" }
        private val input = DataInputStream(socket.getInputStream())
        private val output = DataOutputStream(socket.getOutputStream())

        override fun run() {
            while (true) {
                socket.use { socket ->
                    input.use { input ->
                        output.use { output ->
                            val inMessage = input.readUTF()
                            println("Received: ${inMessage}")
                            val outMessage = "A record # 12 was sent!"
                            output.writeUTF(outMessage)
                            println("Sent: ${outMessage}")
                        }
                    }
                }
            }
        }
        fun menu(inMessage: List<String>) {
            when(inMessage[0].uppercase()) {
                "EXIT" -> return
                "SET" -> {
                    try {
                        dbJSON[inMessage[1].toInt()] = inMessage[2]
                        println("OK")
                    } catch(e: Exception) {
                        println("ERROR")
                    }
                }
                "GET" -> {
                    if (dbJSON[inMessage[1].toInt()].isNotEmpty()) {
                        println(dbJSON[inMessage[1].toInt()])
                    } else {
                        println("ERROR")
                    }
                }
                "DELETE" -> {
                    try {
                        dbJSON[inMessage[1].toInt()] = ""
                        println("OK")
                    } catch(e: Exception) { println("Error") }
                }
            }
        }
    }


    fun main() {


        val address = "127.0.0.1"
        val port = 23456

        ServerSocket(port, 50, InetAddress.getByName(address)).use { server ->
            println("Server started!")
            val session = Db(1000, server.accept())
            session.start()
        }
    }
  learner_created: true
- name: src/jsondatabase/Client.kt
  visible: true
  text: |+
    package jsondatabase.client

    import java.io.DataInputStream
    import java.io.DataOutputStream
    import java.net.InetAddress
    import java.net.Socket

    fun main() {

        val address = "127.0.0.1"
        val port = 23456


        val socket = Socket(InetAddress.getByName(address), port)
        val input = DataInputStream(socket.getInputStream())
        val output = DataOutputStream(socket.getOutputStream())
        println("Client started!")

        val outMessage = "Give me a record # 12"
        output.writeUTF(outMessage)
        println("Sent: ${outMessage}")

        val inMessage = input.readUTF()
        println("Received: ${inMessage}")
    }



  learner_created: true
feedback_link: https://hyperskill.org/learn/step/26261#comment
status: Failed
feedback:
  message: "Exception in test #1\n\njava.io.EOFException\n\tat java.base/java.io.DataInputStream.readUnsignedShort(DataInputStream.java:346)\n\
    \tat java.base/java.io.DataInputStream.readUTF(DataInputStream.java:595)\n\tat\
    \ java.base/java.io.DataInputStream.readUTF(DataInputStream.java:570)\n\tat jsondatabase.client.ClientKt.main(Client.kt:33)\n\
    \nPlease find below the output of your program during this failed test.\n\n---\n\
    \nArguments for ClientKt: -t exit\n\nServer started!\nClient started!\nSent: EXIT"
  time: "Fri, 28 Apr 2023 09:35:40 UTC"
record: 3
