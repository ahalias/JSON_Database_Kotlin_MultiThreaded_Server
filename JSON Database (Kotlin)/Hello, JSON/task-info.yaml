type: edu
files:
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";
        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        @DynamicTest(order = 1)
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client = getClient();
            client.start("-t", "exit");

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram("jsondatabase.client");
        }

        private static TestedProgram getServer() {
            return new TestedProgram("jsondatabase.server");
        }

    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                    "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/jsondatabase/Server.kt
  visible: true
  text: |
    package jsondatabase.server

    import java.io.DataInputStream
    import java.io.DataOutputStream
    import java.io.IOException
    import java.net.InetAddress
    import java.net.ServerSocket
    import kotlin.system.exitProcess

    val size = 1000
    var dbJSON = Array(size + 1) { "" }

    class Db(private val server: ServerSocket) : Thread() {
        private val socket = server.accept()
        private val input = DataInputStream(socket.getInputStream())
        private val output = DataOutputStream(socket.getOutputStream())

        override fun run() {
            try {
                    input.use { input ->
                        output.use { output ->
                            val inMessage = input.readUTF()
                            menu(inMessage.split(" ", limit = 3))
                            socket.close()
                        }
                    }
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }
        fun menu(inMessage: List<String>) {
            when(inMessage[0].uppercase()) {
                "EXIT" -> {
                    output.writeUTF("OK")
                    output.close()
                    input.close()
                    socket.close()
                    server.close()
                    exitProcess(1)
                }
                "SET" -> {
                    try {
                        dbJSON[inMessage[1].toInt()] = inMessage[2]
                        println(dbJSON[inMessage[1].toInt()])
                        output.writeUTF("OK")
                    } catch(e: Exception) {
                        output.writeUTF("ERROR")
                    }
                }
                "GET" -> {
                    if (dbJSON[inMessage[1].toInt()] != "") {
                        output.writeUTF(dbJSON[inMessage[1].toInt()])
                    } else {
                        output.writeUTF("ERROR")
                    }
                }
                "DELETE" -> {
                    try {
                        dbJSON[inMessage[1].toInt()] = ""
                        output.writeUTF("OK")
                    } catch(e: Exception) {
                        output.writeUTF("ERROR")
                    }
                }
            }
        }
    }


    fun main(args: Array<String>) {


        val address = "127.0.0.1"
        val port = 23456

        try {
        ServerSocket(port, 50, InetAddress.getByName(address)).use { server ->
            println("Server started!")
            while (true) {
                val session = Db(server)
                session.start()
            }
        }
        } catch (e: IOException) {
                e.printStackTrace()
            }
    }
  learner_created: true
- name: src/jsondatabase/Client.kt
  visible: true
  text: |+
    package jsondatabase.client

    import java.io.DataInputStream
    import java.io.DataOutputStream
    import java.net.InetAddress
    import java.net.Socket
    import kotlin.system.exitProcess

    fun main(args: Array<String>) {

        val address = "127.0.0.1"
        val port = 23456

        val socket = Socket(InetAddress.getByName(address), port)
        val input = DataInputStream(socket.getInputStream())
        val output = DataOutputStream(socket.getOutputStream())
        println("Client started!")

        var outMessage = ""

        val type = args[1].uppercase()
        if (type == "EXIT") {
            outMessage = "EXIT"
        } else if (type == "SET") {
            outMessage = "$type ${args[3]} ${args[5]}"
        } else {
            outMessage = "$type ${args[3]}"
        }

        output.writeUTF(outMessage)
        println("Sent: ${outMessage}")

        val inMessage = input.readUTF()
        println("Received: ${inMessage}")

        socket.close()
        exitProcess(1)
    }



  learner_created: true
feedback_link: https://hyperskill.org/learn/step/26262#comment
status: Failed
feedback:
  message: "Exception in test #1\n\njava.io.EOFException\n\tat java.base/java.io.DataInputStream.readUnsignedShort(DataInputStream.java:346)\n\
    \tat java.base/java.io.DataInputStream.readUTF(DataInputStream.java:595)\n\tat\
    \ java.base/java.io.DataInputStream.readUTF(DataInputStream.java:570)\n\tat jsondatabase.client.ClientKt.main(Client.kt:54)\n\
    \nPlease find below the output of your program during this failed test.\n\n---\n\
    \nArguments for ClientKt: -t exit\n\nstdout:\nClient started!\nSent: {&quot;type&quot;:&quot;exit&quot;}\n\
    \nstderr:\njava.net.BindException: Address already in use\n\tat java.base/sun.nio.ch.Net.bind0(Native\
    \ Method)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:555)\n\tat java.base/sun.nio.ch.Net.bind(Net.java:544)\n\
    \tat java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:643)\n\tat java.base/java.net.ServerSocket.bind(ServerSocket.java:388)\n\
    \tat java.base/java.net.ServerSocket.&lt;init&gt;(ServerSocket.java:274)\n\tat\
    \ jsondatabase.server.ServerKt.main(Server.kt:115)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)"
  time: "Fri, 28 Apr 2023 12:00:54 UTC"
record: 4
